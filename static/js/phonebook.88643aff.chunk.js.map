{"version":3,"sources":["components/Section/Section.module.css","components/ContactForm/ContactForm.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Section/Section.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactForm.container.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/ContactList/ContactList.container.js","components/Filter/Filter.js","components/Filter/Filter.container.js","views/ContactsView/ContactsView.js","views/ContactsView/ContactsView.container.js"],"names":["module","exports","Section","title","children","className","styles","ContactForm","state","name","number","handleChange","event","currentTarget","value","setState","generateId","shortid","generate","handleFormFill","reviewContactsNames","props","existingContactsName","includes","toLowerCase","emptyForm","shortContactName","length","alert","onSubmit","id","reset","handleSubmit","preventDefault","this","form","TextField","required","label","variant","type","onChange","formLabel","autoComplete","Fab","color","aria-label","Component","connect","contactsSelectors","getExistingContactsName","dispatch","data","contactsOperations","addContact","ContactListItem","contact","onDeleteContact","box","ListItemText","item","primary","secondary","IconButton","button","onClick","ContactList","contacts","deleteContact","list","map","key","getVisibleContacts","Filter","input","getFilter","changeFilter","target","ContactsView","fetchContacts","Container","isLoadingContacts","getLoading"],"mappings":"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","file":"static/js/phonebook.88643aff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__3k5tS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__eyJhV\",\"formLabel\":\"ContactForm_formLabel__ODlDV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"ContactListItem_box__1cD9T\",\"item\":\"ContactListItem_item__1V3n1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3Zf27\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__2kjBs\",\"input\":\"Filter_input__22fQL\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2 className={styles.title}>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport TextField from '@material-ui/core/TextField';\nimport styles from './ContactForm.module.css';\nimport shortid from 'shortid';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    existingContactsName: PropTypes.array.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  generateId = () => {\n    shortid.generate();\n  };\n\n  handleFormFill = () => {\n    const { name, number } = this.state;\n    const { existingContactsName } = this.props;\n    const reviewContactsNames = existingContactsName.includes(\n      name.toLowerCase(),\n    );\n    const emptyForm = !name || !number;\n    const shortContactName = name.length < 3;\n\n    if (reviewContactsNames) {\n      return alert(`${name} is already in contacts`);\n    }\n    if (emptyForm) {\n      return alert('Fill the form');\n    }\n    if (shortContactName) {\n      return alert('Name should have more than 3 letters');\n    }\n\n    this.props.onSubmit({\n      name,\n      number,\n      id: this.generateId(),\n    });\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.handleFormFill();\n    this.reset();\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <TextField\n          required\n          id=\"contact-name\"\n          label=\"Name\"\n          variant=\"filled\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.handleChange}\n          className={styles.formLabel}\n          autoComplete=\"off\"\n        />\n        <TextField\n          required\n          id=\"contact-number\"\n          label=\"Number\"\n          variant=\"filled\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={this.handleChange}\n          className={styles.formLabel}\n          autoComplete=\"off\"\n        />\n        <Fab color=\"primary\" aria-label=\"add\" type=\"submit\">\n          <AddIcon />\n        </Fab>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { connect } from 'react-redux';\r\nimport ContactForm from './ContactForm';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst mapStateToProps = state => ({\r\n  existingContactsName: contactsSelectors.getExistingContactsName(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: data => dispatch(contactsOperations.addContact(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport styles from './ContactListItem.module.css';\n\nconst ContactListItem = ({ contact, onDeleteContact }) => {\n  const { name, number } = contact;\n\n  return (\n    <div className={styles.box}>\n      <ListItemText className={styles.item} primary={name} secondary={number} />\n      <br />\n      <IconButton\n        className={styles.button}\n        aria-label=\"delete\"\n        type=\"button\"\n        onClick={onDeleteContact}\n      >\n        <DeleteIcon />\n      </IconButton>\n    </div>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.exact({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactlistItem from '../ContactListItem';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, ...contact }) => {\n        return (\n          <ContactlistItem\n            key={id}\n            contact={contact}\n            onDeleteContact={() => deleteContact(id)}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport ContactList from './ContactList';\r\n\r\nconst mapStateProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\nexport default connect(mapStateProps, mapDispatchProps)(ContactList);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3 className={styles.title}>Find contacts by name</h3>\n    <TextField\n      type=\"search\"\n      value={value}\n      onChange={onChange}\n      className={styles.input}\n      id=\"filter\"\n      label=\"Search by name...\"\n      variant=\"filled\"\n    />\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\r\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Section from '../../components/Section';\r\nimport ContactForm from '../../components/ContactForm';\r\nimport ContactList from '../../components/ContactList';\r\nimport Filter from '../../components/Filter';\r\nimport Container from '../../components/Container';\r\n// import ContactHeader from '../../components/ContactHeader';\r\n\r\nclass ContactsView extends Component {\r\n  static propTypes = {\r\n    fetchContacts: PropTypes.func.isRequired,\r\n    isLoadingContacts: PropTypes.bool.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Section title=\"Add new contact\">\r\n          {this.props.isLoadingContacts && <h1>Loading...</h1>}\r\n          <ContactForm />\r\n        </Section>\r\n        <Filter />\r\n        <Section title=\"Your Phone book\">\r\n          <ContactList />\r\n        </Section>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default ContactsView;\r\n","import { connect } from 'react-redux';\r\nimport ContactsView from './ContactsView';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}